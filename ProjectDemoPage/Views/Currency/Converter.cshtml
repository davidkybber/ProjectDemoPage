@model CurrencyConverterModel
@{
    ViewData["Title"] = "Currency Page";
}

<div class="jumbotron">
    <h1 class="display-4">My Simple Currency API demo</h1>
    <p>A simple demo that finds the conversion in question and uses the API of a third party to find the most up to date currencies.</p>
    <p>The front end and the application handling the API calls are seperated. In essence a very simple microservice achitecture.</p>
</div>

<form asp-action="Converter">
    <div class="form-group">
        <label asp-for="Quantity"></label>
        <input class="form-control" asp-for="Quantity" />
        <span asp-validation-for="Quantity"></span>
    </div>
    <div class="form-group">
        <label asp-for="CurrencyFrom"></label>
        <select class="form-control dropdown" asp-for="CurrencyFrom" asp-items="Model.CurrencyCodes">
            <option value=""></option>
        </select>
        <span asp-validation-for="CurrencyFrom"></span>
    </div>
    <div class="form-group">
        <label asp-for="CurrencyTo"></label>
        <select class="form-control dropdown" asp-for="CurrencyTo" asp-items="Model.CurrencyCodes">
            <option value=""></option>
        </select>
        <span asp-validation-for="CurrencyTo"></span>
    </div>
    <button type="submit" class="btn btn-default">Submit</button>
    <div asp-validation-summary="All"></div>
</form>

@if (ViewData.ModelState.IsValid && Model.Quantity != 0)
{
    <p>@Model.Quantity from @Model.CurrencyFrom to @Model.CurrencyTo equals @String.Format("{0:0.00}", @Model.ConvertedValue). The rate between @Model.CurrencyFrom and 
        @Model.CurrencyTo is @String.Format("{0:0.0000}", Model.rate). 
    </p>
}